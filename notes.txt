Mechanised Extraterrestial Work Labourer?

The internals use generic names, so that MULE-izing or please-dont-sue-izing is the responsibility of the UI.

The Wiimote D-pad is rotated 90 degrees between its pointing-at-screen and held-as-gamepad modes. Could be irritating, as not sure if "can't see screen" is a good enough test to trigger a rotate. Makes mixed-use IR and d-pad use awkward, too.

Species are an interesting modelling challenge:
 - The set can concievably be considered to be of flexible size; enum checks are
   nice, so is the factory-style adding of instances.
 - Factory is an ill-fit as instances of a species have no per-instance data.
   (Interface Species with a class for each actual species.)
 - The per-species data falls into two camps: logical (starting cash), and
   user interface (name, description, graphics). Neither is particularly
   priviledged over the other, and neither are instance state to keep
   consistent. Logic will only have one implementation; UI may have many.
 - A class Species with a static instance accessor (e.g. backed by a map)
   allows, say, logic to have accessor methods on each instance, but a different
   pattern must be used for UI (getdescription(species)).
 - A simple enum encodes the only information which is crucial to the species'
   consistency---which one it is---and then either data can be accessed by
   lookup tables. This does rather separate the species definition across
   multiple places, but that's inevitable as we allow for differing UIs; a
   simple struct record cannot know what information every UI may want.

Tuning variables which couldn't be determined from the original game have been marked with 'TWEAK' comments.


http://www2.bitstream.net/~marksim/atarimac/fonts.html

[ GameSetup ]  Title/gametype screen
               Colour selection
               Species selection
[ Game      ]  Landing (display only, and sort-of a random event)
               <starts at Scoreboard for round 0>
               Land grab
               Land auction
               Development - Human - Colony map
                                   - Town
                           - Computer
               Production (calculate only)
               Random event
               Production (display only)
               Goods auctions
               Scoreboard (possibly for game end)

There is quite a lot of state for each of these which the GameLogic and the UI need to share but is only pertinent to that stage; not to the state of the game in general.
 Title: difficulty (in GameSetup), number of humans
 Colour/species: current player being configured (rest is in GameSetup)
 Land grab: current cursor position
 Land auction: cursor position again (then on to Auction)
 Pre-development: player coming up, random event
 Development (human): player, position, dir, colony/town, mule, time, wampus
 Development (comp): player, cursor (last change)
 Wampus: player who caught, money awarded
 Post-development: player, gambling winnings or timeout
 Pre-production: event (acid rain, quake, sunspot, radiation, meteorite), loc.
 Production: produced in each square
 Post-production: event (pest, pirate, fire in store, colony ship), location
 Pre-auction: which good, player qty/prod/spoil/surplus/deficit, store qty
 Auction declare: as above, + player buyer/seller, time
 Auction: land or good, player role/bids[/quantitys, store buy/sell/qty], time
 Scoreboard: player land/goods values (money + month in game info), message type

Wampus catching requires that the GameLogic can ask the UI if the player is over the wampus (location + mountain index).

How does the Game object get created? Main(?) needs to know that GameSetup is ready and Game needs to be spawned. Also when it can be deleted. GameLogic can't do it without pointer-to-pointer.

Sprite tiles are 64x64 and alpha-blend on top of the background. Top-left offset is 32 horizontal and 80 vertical. The mountain is smaller and has 16px horizontal and 4px vertical random wiggle within its subrow (of which there are four).

-- Original game documentation --
Manual:
http://muttoo.on.ca/mulemanual/

Decompilation full of lovely original values/algorithms:
http://bringerp.free.fr/RE/Mule/mule_document.html
Some texts from same source:
http://bringerp.free.fr/RE/phpBB2/viewtopic.php?t=55&sid=364d93ddcea13add2601037057ee31ab

Some lists of random events, etc.:
http://strategywiki.org/wiki/M.U.L.E.

At some future point in time, might want to add a 'difficulty' setting to roll in some unreleased Son of MULE features:
http://www.worldofmule.net/tiki-index.php?page=SoMReport

-- Build notes --
http://lazyfoo.net/SDL_tutorials/lesson03/windows/devcpp/index.php
covers using the SDL sublibraries with Dev-C++: only the .lib goes in lib; the .dlls go with the built .exe.
fakeroot can be useful to convince Linux Subversion to operate on a workspace on FAT32, where chmod fails.
tofrodos is the Ubuntu package for dos2unix, for when Dev-C++ rudely converts source files.
For all this, svn commit may still fail due to being unable to set atime, *sigh*. cp -a to /tmp/ and commit that copy if needs be.

